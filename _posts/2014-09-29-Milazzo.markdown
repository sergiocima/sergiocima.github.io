---
layout: post
title:  “Incendio alla raffineria di Milazzo. Prototipo di analisi dei post su Twitte”
date:   2014-09-29 23:00:00
categories: Knime
---
_Cronaca_ 
0.45 incendio (gazzetta mezzogiorno)
0.49 sarakka71 | incendio pauroso alla raffineria di Milazzo https://twitter.com/sarakka71/status/515634209005010944/photo/1
2.30 Incendio in corso alla Raffineria (comune di milazzo)
3.00 Aggiornamento delle 3 incendio Raffineria. Situazione sotto controllo (comune di milazzo)
3.02 Incendio alla raffineria, notte di paura a Milazzo poi fiamme domate (ansa)
3.40 Aggiornamento delle 3,40 incendio Raffineria. Seguono operazioni di raffreddamento (comune di milazzo)
4.45 AGGIORNAMENTO DELLE 4,45. Fiamme alte (comune di milazzo)
6.25 AGGIORNAMENTO DELLE 6,25. Continua monitoraggio (comune di milazzo)
6.50 AGGIORNAMENTO DELLE 6,50. Chiesto intervento Arpa e disposta chiusura scuole (comune di milazzo)
8.00 Incendio Raffineria, Aggiornamento delle 8. Chiesto monitoraggio (comune di milazzo)
10.15 Domato l’incendio alla Raffineria. Fine di una notte di paura (comune di milazzo)
10.56 Rogo raffineria Milazzo,aperta inchiesta (ansa)
16.55 Ripreso incendio (Gazzetta del sud)

Cerco una libreria di R che permetta l'integrazione con d3js, che quindi produca grafici minimamente interattivi, già stilati con buon gusto e possibilmente che non mi richiedano troppi sforzi nel comprendere il codice. Trovo [rChart][Link-rChart] e lo installo subito. Dagli esempi mi piace questo, si adatta a un mio dataset, quindi seguo il tutorial (in realtà due brevi comandi in R)

    n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
    n1$print("chart3")

E questo è il codice che restituisce R direttamente nella console 

    <div id = 'chart3' class = 'rChart nvd3'></div>
    <script type='text/javascript'>
     $(document).ready(function(){
          drawchart3()
        });
        function drawchart3(){  
          var opts = {
     "dom": "chart3",
    "width":    800,
    "height":    400,
    "x": "Hair",
    "y": "Freq",
    "group": "Eye",
    "type": "multiBarChart",
    "id": "chart3" 
    },
            data = [
     {
     "Hair": "Black",
    "Eye": "Brown",
    "Sex": "Male",
    "Freq":             32 
    },
    {
     "Hair": "Brown",
    "Eye": "Brown",
    "Sex": "Male",
    "Freq":             53 
    },
    {
     "Hair": "Red",
    "Eye": "Brown",
    "Sex": "Male",
    "Freq":             10 
    },
    {
     "Hair": "Blond",
    "Eye": "Brown",
    "Sex": "Male",
    "Freq":              3 
    },
    {
     "Hair": "Black",
    "Eye": "Blue",
    "Sex": "Male",
    "Freq":             11 
    },
    {
     "Hair": "Brown",
    "Eye": "Blue",
    "Sex": "Male",
    "Freq":             50 
    },
    {
     "Hair": "Red",
    "Eye": "Blue",
    "Sex": "Male",
    "Freq":             10 
    },
    {
     "Hair": "Blond",
    "Eye": "Blue",
    "Sex": "Male",
    "Freq":             30 
    },
    {
     "Hair": "Black",
    "Eye": "Hazel",
    "Sex": "Male",
    "Freq":             10 
    },
    {
     "Hair": "Brown",
    "Eye": "Hazel",
    "Sex": "Male",
    "Freq":             25 
    },
    {
     "Hair": "Red",
    "Eye": "Hazel",
    "Sex": "Male",
    "Freq":              7 
    },
    {
     "Hair": "Blond",
    "Eye": "Hazel",
    "Sex": "Male",
    "Freq":              5 
    },
    {
     "Hair": "Black",
    "Eye": "Green",
    "Sex": "Male",
    "Freq":              3 
    },
    {
     "Hair": "Brown",
    "Eye": "Green",
    "Sex": "Male",
    "Freq":             15 
    },
    {
     "Hair": "Red",
    "Eye": "Green",
    "Sex": "Male",
    "Freq":              7 
    },
    {
     "Hair": "Blond",
    "Eye": "Green",
    "Sex": "Male",
    "Freq":              8 
    } 
    ]
      
          if(!(opts.type==="pieChart" || opts.type==="sparklinePlus")) {
            var data = d3.nest()
              .key(function(d){
                //return opts.group === undefined ? 'main' : d[opts.group]
                //instead of main would think a better default is opts.x
                return opts.group === undefined ? opts.y : d[opts.group];
              })
              .entries(data);
          }
          
          if (opts.disabled != undefined){
            data.map(function(d, i){
              d.disabled = opts.disabled[i]
            })
          }
          
          nv.addGraph(function() {
            var chart = nv.models[opts.type]()
              .x(function(d) { return d[opts.x] })
              .y(function(d) { return d[opts.y] })
              .width(opts.width)
              .height(opts.height)

           d3.select("#" + opts.id)
            .append('svg')
            .datum(data)
            .transition().duration(500)
            .call(chart);
    
           nv.utils.windowResize(chart.update);
           return chart;
          });
        };
    </script>

Bene e ora? Lo prendo e lo incollo in un file html. Lo apro e non succede nulla! Per forza, manca ancora un bel pezzetto. Nel <code>head</code> va messo questo

    <link rel="stylesheet" type="text/css" href="nv.d3.min.css"> 
    <script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
    <script src="http://code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
    <script src="https://raw.githubusercontent.com/mbostock/d3/master/d3.min.js" charset="utf-8"></script>
    <script src="https://raw.githubusercontent.com/novus/nvd3/master/nv.d3.min.js"></script>

Il css l'ho scaricato e modificato per farci stare in altezza il grafico. Il jquery ce lo ha aggiunto il mio amico [Riccardo][Link-Riccardo] mentre il js di d3 va aggiungo perché da questo dipende il js di nv. Entrambi possono essere presi direttamente dai repository su Github o messi in locale. 
Salvato l'html e aperto: ora va. A questo punto si possono modificare i dati direttamente nel codice o provare a generare con R altri grafici con altri dati esterni.

[Link-rChart]: http://rcharts.io
[Link-Riccardo]: http://eidogram.com